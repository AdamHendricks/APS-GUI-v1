package za.ac.cput.StudentDeskGui;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.*;
import java.util.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import za.ac.cput.APScalc.CPUTPointsCalculation;
import za.ac.cput.APScalc.SUaggregateCalculation;
import za.ac.cput.APScalc.UCTPointsCalculation;
import za.ac.cput.APScalc.UWCPointsCalculation;
import za.ac.cput.Links.Links;
import za.ac.cput.domain.ApsResults;
import za.ac.cput.domain.Student;
import za.ac.cput.domain.UWCcourseQualify;

public class SDGui extends JFrame implements ActionListener {

    private JPanel panelWest, panelWestInner, panelEast, panelEastInner, panelEastInnerNorth, panelNorth,
            resultPane, resultPane2, resultPaneUWC, resultPaneUCT, resultPaneCPUT, resultPaneStell, centerPane, panelEastInnerFal, panelEastInner2, panelEastInner3, panelEastInner4,
            panelEastInner5, panelEastInner6, panelEastInner7, panelEastInner8, disadvPane, nbtPane, courseListPane, courseListLblPane, courseListBoxPane, apsResultLblPane;
    private JMenuBar menuBar;
    private JMenu menu;
    private JMenuItem m1, m2, m3;
    private JButton btnHome, btnLinks, btnFaq, downloads, calcBtn, clearBtn, disadvFactorLinkBtn, nbtBtn;
    private JTextField textFal, textEast1, textEast2, textEast3, textEast4, textEast5, textEast6, textEast7, textEast8, resultText, resultText2, resultText3, resultText4, resultText5, resultText6, resultText7,
            textNbtAl, textNbtQl, textNbtMat, textDisadv;
    private JLabel lblTop, lblResult, lblResult2, lblResult3, lblResult4, lblResult5, lblResult6, lblResult7, lblLang, lblFal, lblMath, lblLo, lblNextBest1, lblNextBest2, lblNextBest3,
            additionalSub1, additionalSub2, lblBlank, percentage1, percentageFal, percentage2, percentage3, percentage4, percentage5,
            percentage6, percentage7, percentage8,
            nbtLbl, nbtAlScore, nbtQlScore, nbtMatScore, disadvScore, qualifyForLbl, apsResultLbl, uwcLbl, uwcScoreLbl, uctScoreLbl1, uctScoreLbl2, uctScoreLbl3, cputScoreLbl1, cputScoreLbl2, stellScoreLbl;
    private JComboBox comboBox1, comboBox2, comboBoxFal, comboBox3, comboBox4, comboBox5, comboBox6,
            comboBox7, comboBox8;
    private JTable resultTable, courseTableUWC;
    private JScrollPane scrollArea, scrollAreaApsResult, scrollAreaUWC;

    private DefaultTableModel tableModel, tableModelUWC;
    
    public SDGui() {
        super("Calculate APS");

        panelWest = new JPanel();
        panelWestInner = new JPanel();
        panelEast = new JPanel();
        panelEastInner = new JPanel();
        panelEastInnerFal = new JPanel();
        panelEastInner2 = new JPanel();
        panelEastInner3 = new JPanel();
        panelEastInner4 = new JPanel();
        panelEastInner5 = new JPanel();
        panelEastInner6 = new JPanel();
        panelEastInner7 = new JPanel();
        panelEastInner8 = new JPanel();
        panelEastInnerNorth = new JPanel();
        panelNorth = new JPanel();
        nbtPane = new JPanel();
        disadvPane = new JPanel();
        resultPane = new JPanel();
        resultPane2 = new JPanel();
        resultPaneUWC = new JPanel();
        resultPaneUCT = new JPanel();
        resultPaneCPUT = new JPanel();
        resultPaneStell = new JPanel();
        centerPane = new JPanel();
        courseListPane = new JPanel();
        courseListLblPane = new JPanel();
        courseListLblPane.setSize(600, 30);
        courseListBoxPane = new JPanel();
        apsResultLblPane = new JPanel();
        
        scrollArea = new JScrollPane();
        scrollAreaUWC = new JScrollPane();
        scrollAreaApsResult = new JScrollPane();

        panelWest.setPreferredSize(new Dimension(150, 300));
        //panelEast.setPreferredSize(new Dimension(700, 600));
        scrollArea.setPreferredSize(new Dimension(700, 500));
        scrollAreaApsResult.setPreferredSize(new Dimension(1000, 100));

        scrollArea.setViewportView(panelEast);
        scrollAreaUWC.setViewportView(courseListPane);
        scrollAreaApsResult.setViewportView(resultPane2);
        
        menuBar = new JMenuBar();
        menu = new JMenu("Menu");
        m1 = new JMenuItem("Item 1");
        m2 = new JMenuItem("Item 2");
        m3 = new JMenuItem("Item 3");
        
        btnHome = new JButton("Home");
        btnLinks = new JButton("Useful Links");
        btnFaq = new JButton("FAQ's");
        calcBtn = new JButton("Go");
        clearBtn = new JButton("Clear");
        downloads = new JButton("Downloads");
        disadvFactorLinkBtn = new JButton(">Get disadvantage factor<");
        nbtBtn = new JButton(">Get NBT Score<");

        textFal = new JTextField(6);
        textEast1 = new JTextField(6);
        textEast2 = new JTextField(6);
        textEast3 = new JTextField(6);
        textEast4 = new JTextField(6);
        textEast5 = new JTextField(6);
        textEast6 = new JTextField(6);
        textEast7 = new JTextField(6);
        textEast8 = new JTextField(6);
        textDisadv = new JTextField(6);
        textNbtAl = new JTextField(6);
        textNbtQl = new JTextField(6);
        textNbtMat = new JTextField(6);
        resultText = new JTextField(6);
        resultText2 = new JTextField(6);
        resultText3 = new JTextField(6);
        resultText4 = new JTextField(6);
        resultText5 = new JTextField(6);
        resultText6 = new JTextField(6);
        resultText7 = new JTextField(6);

        lblTop = new JLabel("Calculate APS");
        lblTop.setFont(new Font("Arial", Font.BOLD, 16));
        nbtLbl = new JLabel("NBT Results: ");
        nbtAlScore = new JLabel("AL Score: ");
        nbtQlScore = new JLabel("QL Score: ");
        nbtMatScore = new JLabel("MAT Score: ");
        lblResult = new JLabel("UWC Result: ");
        lblResult2 = new JLabel("UCT non-science: ");
        lblResult3 = new JLabel("UCT Health Sciences: ");
        lblResult4 = new JLabel("UCT Science Faculty: ");
        lblResult5 = new JLabel("CPUT Method 1: ");
        lblResult6 = new JLabel("CPUT Method 3: ");
        lblResult7 = new JLabel("Stellenbosch: ");
        lblLang = new JLabel("First language: ");
        lblLang.setPreferredSize(new Dimension(222, 20));
        lblFal = new JLabel("First additional language: ");
        lblFal.setPreferredSize(new Dimension(222, 20));
        lblMath = new JLabel("Mathematics or Mathematics Literacy: ");
        lblMath.setPreferredSize(new Dimension(222, 20));
        lblLo = new JLabel("Life Orientation: ");
        lblLo.setPreferredSize(new Dimension(222, 20));
        lblNextBest1 = new JLabel("Next best subject 1: ");
        lblNextBest1.setPreferredSize(new Dimension(222, 20));
        lblNextBest2 = new JLabel("Next best subject 2: ");
        lblNextBest2.setPreferredSize(new Dimension(222, 20));
        lblNextBest3 = new JLabel("Next best subject 3: ");
        lblNextBest3.setPreferredSize(new Dimension(222, 20));
        additionalSub1 = new JLabel("Additional subject 1: ");
        additionalSub1.setPreferredSize(new Dimension(222, 20));
        additionalSub2 = new JLabel("Additional subject 2: ");
        additionalSub2.setPreferredSize(new Dimension(222, 20));
        percentage1 = new JLabel("Percentage acheived: ");
        percentageFal = new JLabel("Percentage acheived: ");
        percentage2 = new JLabel("Percentage acheived: ");
        percentage3 = new JLabel("Percentage acheived: ");
        percentage4 = new JLabel("Percentage acheived: ");
        percentage5 = new JLabel("Percentage acheived: ");
        percentage6 = new JLabel("Percentage acheived: ");
        percentage7 = new JLabel("Percentage acheived: ");
        percentage8 = new JLabel("Percentage acheived: ");
        
        qualifyForLbl = new JLabel("Applicable courses");
        qualifyForLbl.setFont(new Font("Arial", Font.BOLD, 16));
        apsResultLbl = new JLabel("APS Results: ");
        apsResultLbl.setFont(new Font("Arial", Font.BOLD, 16));
        uwcLbl = new JLabel("UWC");
        uwcLbl.setFont(new Font("Arial", Font.BOLD, 12));
        //uwcLbl.setVisible(false);
        uwcScoreLbl = new JLabel("");
        uwcScoreLbl.setFont(new Font("Arial", Font.BOLD, 12));
        uctScoreLbl1 = new JLabel("");
        uctScoreLbl1.setFont(new Font("Arial", Font.BOLD, 12));
        uctScoreLbl2 = new JLabel("");
        uctScoreLbl2.setFont(new Font("Arial", Font.BOLD, 12));
        uctScoreLbl3 = new JLabel("");
        uctScoreLbl3.setFont(new Font("Arial", Font.BOLD, 12));
        cputScoreLbl1 = new JLabel("");
        cputScoreLbl1.setFont(new Font("Arial", Font.BOLD, 12));
        cputScoreLbl2 = new JLabel("");
        cputScoreLbl2.setFont(new Font("Arial", Font.BOLD, 12));
        stellScoreLbl = new JLabel("");
        stellScoreLbl.setFont(new Font("Arial", Font.BOLD, 12));

        String subjectComboItem1[] = {" ", "Afrikaans", "English", "isiXhosa"};
        String subjectComboItem2[] = {" ", "Mathematical Literacy", "Mathematics",};
        String subjectComboItem3[] = {" ", "Accounting", "Agricultural Science", "Business Studies",
            "Consumer studies", "Dramatic Arts", "Economics", "Engineering graphics and Arts",
            "Geography", "History", "Information Technology", "Life Sciences", "Music", "Physics", "Religion Studies", "Visual arts"};
        comboBox1 = new JComboBox(subjectComboItem1);
        comboBoxFal = new JComboBox(subjectComboItem1);
        comboBox2 = new JComboBox(subjectComboItem2);
        comboBox3 = new JComboBox(subjectComboItem3);
        comboBox4 = new JComboBox(subjectComboItem3);
        comboBox5 = new JComboBox(subjectComboItem3);
        comboBox6 = new JComboBox(subjectComboItem3);
        comboBox7 = new JComboBox(subjectComboItem3);

        //panelEast.setBackground(Color.GRAY);
        panelWest.setBackground(Color.GRAY);
    }

    public void setGUI() {
        panelWest.setLayout(new GridLayout(1, 1));
        panelWestInner.setLayout(new GridLayout(6, 1));
        panelEast.setLayout(new GridLayout(18, 1));
        panelEastInner.setLayout(new FlowLayout(FlowLayout.LEFT));
        panelEastInnerFal.setLayout(new FlowLayout(FlowLayout.LEFT));
        panelEastInner2.setLayout(new FlowLayout(FlowLayout.LEFT));
        panelEastInner3.setLayout(new FlowLayout(FlowLayout.LEFT));
        panelEastInner4.setLayout(new FlowLayout(FlowLayout.LEFT));
        panelEastInner5.setLayout(new FlowLayout(FlowLayout.LEFT));
        panelEastInner6.setLayout(new FlowLayout(FlowLayout.LEFT));
        panelEastInner7.setLayout(new FlowLayout(FlowLayout.LEFT));
        panelEastInner8.setLayout(new FlowLayout(FlowLayout.LEFT));
        //panelEastInnerNorth.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
        panelNorth.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
        nbtPane.setLayout(new FlowLayout(FlowLayout.LEFT));
        disadvPane.setLayout(new FlowLayout(FlowLayout.LEFT));
        resultPane.setLayout(new FlowLayout(FlowLayout.LEFT));
        resultPane2.setLayout(new GridLayout(1, 1));
        //resultPane2.setLayout(new FlowLayout(FlowLayout.LEFT));
        resultPaneUWC.setLayout(new FlowLayout(FlowLayout.LEFT));
        resultPaneUCT.setLayout(new FlowLayout(FlowLayout.LEFT));
        resultPaneCPUT.setLayout(new FlowLayout(FlowLayout.LEFT));
        resultPaneStell.setLayout(new FlowLayout(FlowLayout.LEFT));
        courseListPane.setLayout(new GridLayout(1, 1));
        courseListLblPane.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
        courseListBoxPane.setLayout(new FlowLayout(FlowLayout.LEFT));
        //courseListBoxPane.setLayout(new GridLayout(2, 4));
        centerPane.setLayout(new GridLayout(2, 2));
        //centerPane.setLayout(new BoxLayout(centerPane, BoxLayout.Y_AXIS));
        apsResultLblPane.setLayout(new FlowLayout(FlowLayout.LEFT));
        

        menu.add(m1);
        menu.add(m2);
        menu.add(m3);
        menuBar.add(menu);
        super.setJMenuBar(menuBar);
        
        tableModel = new DefaultTableModel();
        resultTable = new JTable(tableModel);
        tableModel.addColumn("UWC");
        tableModel.addColumn("UCT non-science");
        tableModel.addColumn("UCT Health Sciences");
        tableModel.addColumn("UCT Science");
        tableModel.addColumn("CPUT Method 1");
        tableModel.addColumn("CPUT Method 2");
        tableModel.addColumn("Stellenbosch");
        
        tableModelUWC = new DefaultTableModel();
        courseTableUWC = new JTable(tableModelUWC);
        tableModelUWC.addColumn("UWC");
        
        
        centerPane.add(panelWest);
        centerPane.add(scrollArea);
        centerPane.add(scrollAreaUWC);
        panelWest.add(panelWestInner);
        panelWestInner.add(btnHome);
        panelWestInner.add(btnLinks);
        panelWestInner.add(btnFaq);
        panelWestInner.add(downloads);
        panelNorth.add(lblTop);
        
        panelEast.add(lblLang);
        panelEast.add(comboBox1);
        panelEast.add(textEast1);

        panelEast.add(panelEastInner2);
        panelEast.add(panelEastInner);
        panelEast.add(panelEastInnerFal);
        panelEast.add(panelEastInner3);
        panelEast.add(panelEastInner4);
        panelEast.add(panelEastInner5);
        panelEast.add(panelEastInner6);
        panelEast.add(panelEastInner7);
        panelEast.add(panelEastInner8);
        panelEast.add(nbtPane);
        panelEast.add(disadvPane);
        panelEast.add(resultPane);
        panelEast.add(apsResultLblPane);
        panelEast.add(resultPaneUWC);
        panelEast.add(resultPaneUCT);
        panelEast.add(resultPaneCPUT);
        panelEast.add( resultPaneStell);
        
        
        panelEastInner.add(lblLang);
        panelEastInner.add(comboBox1);
        panelEastInner.add(percentage1);
        panelEastInner.add(textEast1);
        panelEastInnerFal.add(lblFal);
        panelEastInnerFal.add(comboBoxFal);
        panelEastInnerFal.add(percentageFal);
        panelEastInnerFal.add(textFal);
        panelEastInner2.add(lblMath);
        panelEastInner2.add(comboBox2);
        panelEastInner2.add(percentage2);
        panelEastInner2.add(textEast2);
        panelEastInner3.add(lblLo);
        panelEastInner3.add(percentage3);
        panelEastInner3.add(textEast3);
        panelEastInner4.add(lblNextBest1);
        panelEastInner4.add(comboBox3);
        panelEastInner4.add(percentage4);
        panelEastInner4.add(textEast4);
        panelEastInner5.add(lblNextBest2);
        panelEastInner5.add(comboBox4);
        panelEastInner5.add(percentage5);
        panelEastInner5.add(textEast5);
        panelEastInner6.add(lblNextBest3);
        panelEastInner6.add(comboBox5);
        panelEastInner6.add(percentage6);
        panelEastInner6.add(textEast6);
        panelEastInner7.add(additionalSub1);
        panelEastInner7.add(comboBox6);
        panelEastInner7.add(percentage7);
        panelEastInner7.add(textEast7);
        panelEastInner8.add(additionalSub2);
        panelEastInner8.add(comboBox7);
        panelEastInner8.add(percentage8);
        panelEastInner8.add(textEast8);
        nbtPane.add(nbtBtn);
        nbtPane.add(nbtLbl);
        nbtPane.add(nbtAlScore);
        nbtPane.add(textNbtAl);
        nbtPane.add(nbtQlScore);
        nbtPane.add(textNbtQl);
        nbtPane.add(nbtMatScore);
        nbtPane.add(textNbtMat);
        disadvPane.add(disadvFactorLinkBtn);
        disadvPane.add(textDisadv);
        resultPane.add(clearBtn);
        resultPane.add(calcBtn);
        resultPane2.add(new JScrollPane(resultTable));
        resultPaneUWC.add(lblResult);
        resultPaneUWC.add(uwcScoreLbl);
        resultPaneUCT.add(lblResult2);
        resultPaneUCT.add(uctScoreLbl1);
        resultPaneUCT.add(lblResult3);
        resultPaneUCT.add(uctScoreLbl2);
        resultPaneUCT.add(lblResult4);
        resultPaneUCT.add(uctScoreLbl3);
        resultPaneCPUT.add(lblResult5);
        resultPaneCPUT.add(cputScoreLbl1);
        resultPaneCPUT.add(lblResult6);
        resultPaneCPUT.add(cputScoreLbl2);
        resultPaneStell.add(lblResult7);
        resultPaneStell.add(stellScoreLbl);
        
        apsResultLblPane.add(apsResultLbl);
        
        //courseListPane.add(courseListLblPane);
        courseListPane.add(courseListBoxPane);
        courseListLblPane.add(qualifyForLbl);
        courseListBoxPane.add(courseListLblPane);
        courseListBoxPane.add(new JScrollPane(courseTableUWC));
        
        this.add(centerPane, BorderLayout.CENTER);
        this.add(panelWest, BorderLayout.WEST);
        //this.add(panelWestInner, BoxLayout.Y_AXIS);
        //this.add(panelEast, BorderLayout.EAST);
        //this.add(panelEastInnerNorth, FlowLayout.CENTER);
        this.add(panelNorth, BorderLayout.NORTH);

        calcBtn.addActionListener(this);
        clearBtn.addActionListener(this);
        disadvFactorLinkBtn.addActionListener(this);
        nbtBtn.addActionListener(this);
    }

    double mathNscPercent, physNscPercent, languageNscPercent, secondLanguageNscPercent, accountingNscPercent, loNscPercent, firstBestPercent,
            secondBestPercent, thirdBestPercent, additionalSub1Percent, additionalSub2Percent, disadvFactor, nbtAl, nbtQl, nbtMat;

    @Override
    public void actionPerformed(ActionEvent e) {

        double zero = 0;
        double output, uctOutput, uctOutput2, uwcOutput, suOutput;
        Student student1 = new Student(mathNscPercent, physNscPercent, languageNscPercent,
                secondLanguageNscPercent, accountingNscPercent, loNscPercent, firstBestPercent,
                secondBestPercent, thirdBestPercent, additionalSub1Percent, additionalSub2Percent,
                disadvFactor, nbtAl, nbtQl, nbtMat);
        
        ApsResults results = new ApsResults();

        if (e.getActionCommand().equals("Go")) {

            //qualify.comHS(results);
            //JOptionPane.showMessageDialog(null, "You qualify for the following courses at UWC: \n" + qualify.courses);
            student1.setNbtAl(Double.parseDouble(textNbtAl.getText()));
            student1.setNbtQl(Double.parseDouble(textNbtQl.getText()));
            student1.setNbtMat(Double.parseDouble(textNbtMat.getText()));
            student1.setDisadvFactor(Double.parseDouble(textDisadv.getText()));

            student1.setMathNscPercent(Double.parseDouble(textEast2.getText()));
            student1.setLanguageNscPercent(Double.parseDouble(textEast1.getText()));
            student1.setSecondLanguageNscPercent(Double.parseDouble(textFal.getText()));
            student1.setLoNscPercent(Double.parseDouble(textEast3.getText()));

            if (comboBox3.getSelectedItem() == "Physics") {
                student1.setPhysNscPercent(Double.parseDouble(textEast4.getText()));
            } else if (comboBox3.getSelectedItem() == "Accounting") {
                student1.setAccountingNscPercent(Double.parseDouble(textEast4.getText()));
            } else {
                if (student1.getPhysNscPercent() <= 0) {
                    student1.setPhysNscPercent(zero);
                }
                if (student1.getAccountingNscPercent() <= 0) {
                    student1.setAccountingNscPercent(zero);
                }
                student1.setFirstBestPercent(Double.parseDouble(textEast4.getText()));
            }

            if (comboBox4.getSelectedItem() == "Physics") {
                student1.setPhysNscPercent(Double.parseDouble(textEast5.getText()));
            } else if (comboBox4.getSelectedItem() == "Accounting") {
                student1.setAccountingNscPercent(Double.parseDouble(textEast5.getText()));
            } else {
                if (student1.getPhysNscPercent() <= 0) {
                    student1.setPhysNscPercent(zero);
                }
                if (student1.getAccountingNscPercent() <= 0) {
                    student1.setAccountingNscPercent(zero);
                }
                student1.setSecondBestPercent(Double.parseDouble(textEast5.getText()));
            }

            if (comboBox5.getSelectedItem() == "Physics") {
                student1.setPhysNscPercent(Double.parseDouble(textEast6.getText()));
            } else if (comboBox5.getSelectedItem() == "Accounting") {
                student1.setAccountingNscPercent(Double.parseDouble(textEast6.getText()));
            } else {
                if (student1.getPhysNscPercent() <= 0) {
                    student1.setPhysNscPercent(zero);
                }
                if (student1.getAccountingNscPercent() <= 0) {
                    student1.setAccountingNscPercent(zero);
                }
                student1.setThirdBestPercent(Double.parseDouble(textEast6.getText()));
            }

            if (comboBox6.getSelectedItem() == "Physics") {
                student1.setPhysNscPercent(Double.parseDouble(textEast7.getText()));
            } else if (comboBox6.getSelectedItem() == "Accounting") {
                student1.setAccountingNscPercent(Double.parseDouble(textEast7.getText()));
            } else {
                if (student1.getPhysNscPercent() <= 0) {
                    student1.setPhysNscPercent(zero);
                }
                if (student1.getAccountingNscPercent() <= 0) {
                    student1.setAccountingNscPercent(zero);
                }
                student1.setAdditionalSub1Percent(Double.parseDouble(textEast7.getText()));
            }

            if (comboBox7.getSelectedItem() == "Physics") {
                student1.setPhysNscPercent(Double.parseDouble(textEast8.getText()));
            } else if (comboBox7.getSelectedItem() == "Accounting") {
                student1.setAccountingNscPercent(Double.parseDouble(textEast8.getText()));
            } else {
                if (student1.getPhysNscPercent() <= 0) {
                    student1.setPhysNscPercent(zero);
                }
                if (student1.getAccountingNscPercent() <= 0) {
                    student1.setAccountingNscPercent(zero);
                }
                student1.setAdditionalSub2Percent(Double.parseDouble(textEast8.getText()));
            }

            CPUTPointsCalculation cputPoints = new CPUTPointsCalculation();
            output = cputPoints.cputMethod1(student1);
            cputScoreLbl1.setText(String.valueOf(output));
            results.setCputMeth1(output);

            if (student1.getAccountingNscPercent() > 0 && student1.getMathNscPercent() > 0) {
                output = cputPoints.cputMethod3(student1);
                cputScoreLbl2.setText(String.valueOf(output));
                results.setCputMeth3(output);
            }

            UCTPointsCalculation uctPoints = new UCTPointsCalculation();
            uctOutput = uctPoints.UCTPointsCalculation(student1);
            uctScoreLbl1.setText(String.valueOf(uctOutput));
            results.setUctNonSc(uctOutput);

            if (student1.getPhysNscPercent() != 0) {
                uctOutput = uctPoints.uctHealthSciences(student1);
                uctOutput2 = uctPoints.uctFacultyScience(student1);
                uctScoreLbl2.setText(String.valueOf(uctOutput));
                uctScoreLbl3.setText(String.valueOf(uctOutput2));
                results.setUctHealthSc(uctOutput);
                results.setUctSc(uctOutput2);
            }

            UWCPointsCalculation uwcPoints = new UWCPointsCalculation();
            uwcOutput = uwcPoints.UWCPointsCalculation(student1);
            uwcScoreLbl.setText(String.valueOf(uwcOutput));
            results.setUwc(uwcOutput);
            
            SUaggregateCalculation suPoints = new SUaggregateCalculation();
            suOutput = suPoints.SUaggregate(student1);
            stellScoreLbl.setText(String.valueOf(suOutput));
            results.setStell(suOutput);

            tableModel.insertRow(0, new Object[]{String.valueOf(results.getUwc()), String.valueOf(results.getUctNonSc()),
            String.valueOf(results.getUctHealthSc()), String.valueOf(results.getUctSc()), String.valueOf(results.getCputMeth1()), 
                    String.valueOf(results.getCputMeth3()), String.valueOf(results.getStell())});
            
            ArrayList <String> uwcCourseData = uwcPoints.getQualify();
            int arrLength = uwcCourseData.size();
            String [] uwcCourseDataArr = new String [arrLength];
            
            for(int j = 0; j < arrLength; j++){
                uwcCourseDataArr[j] = uwcCourseData.get(j);
            }
            
            for(int i = 0; i < uwcCourseData.size(); i++){
                tableModelUWC.insertRow(i, new Object[]{String.valueOf(uwcCourseDataArr[i])});
                }
            
        } else if (e.getActionCommand().equals(">Get disadvantage factor<")) {
            Links openBrowser = new Links();
            try {
                openBrowser.openDisadv();
            } catch (URISyntaxException ex) {
                System.out.println("URI syntax exception");
            } catch (IOException ex) {
                System.out.println("IOE exception");
            }

        } else if (e.getActionCommand().equals(">Get NBT Score<")) {
            Links openBrowser = new Links();
            try {
                openBrowser.openNBT();
            } catch (URISyntaxException ex) {
                System.out.println("URI syntax exception");
            } catch (IOException ex) {
                System.out.println("IOE exception");
            }

        } else if (e.getActionCommand().equals("Clear")) {
            textEast1.setText("");
            textEast2.setText("");
            textFal.setText("");
            textEast3.setText("");
            textEast4.setText("");
            textEast5.setText("");
            textEast6.setText("");
            textEast7.setText("");
            textEast8.setText("");
            resultText.setText("");
            resultText2.setText("");
            resultText3.setText("");
            resultText4.setText("");
            resultText5.setText("");
            resultText6.setText("");
            resultText7.setText("");
        }

    }
}
